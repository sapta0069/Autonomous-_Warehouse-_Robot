# Artificial Intelligence for Business
# Optimizing Warehouse Flows with Q-Learning
# Importing the libraries
import numpy as np
# Setting the parameters gamma and alpha for the Q-Learning
gamma = 0.75
alpha = 0.9

# PART 1 - DEFINING THE ENVIRONMENT
# Defining the states
location_to_state = { 'A': 0,'B': 1,'C': 2,'D': 3,'E': 4,'F': 5,'G': 6,'H': 7,'I': 8,'J': 9,'K': 10,'L': 11}

# Defining the actions
actions = [0,1,2,3,4,5,6,7,8,9,10,11]

# Defining the rewards
R = np.array([
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]
])

# PART 2 - BUILDING THE AI SOLUTION WITH Q-LEARNING
# Making a mapping from the states to the locations
state_to_location = {state: location for location, state in location_to_state.items()}

# Function to generate the route from a starting location to an ending location
def route(starting_location, ending_location,exploration_chance = 0.1):
    # Copy the reward matrix
    R_new = np.copy(R)
    
    # Get the state for the ending location
    ending_state = location_to_state[ending_location]
    
    # Set a high reward for reaching the goal state
    R_new[ending_state, ending_state] = 1000
    
    # Initialize Q-table with zeros
    Q = np.zeros([12, 12])
    
    # Q-learning process
    for i in range(1000):
        current_state = np.random.randint(0, 12)
        playable_actions = []

        # Identify playable actions
        for j in range(12):
            if R_new[current_state, j] > 0:
                playable_actions.append(j)
        
        # Choose the next state randomly from playable actions
        next_state = np.random.choice(playable_actions)
        
        # Temporal Difference (TD) update
        TD = R_new[current_state, next_state] + gamma * Q[next_state, np.argmax(Q[next_state,])] - Q[current_state, next_state]
        Q[current_state, next_state] = Q[current_state, next_state] + alpha * TD

    # Initialize route with starting location
    route = [starting_location]
    next_location = starting_location

    # Generate the route by following the learned policy
    while next_location != ending_location:
        starting_state = location_to_state[starting_location]
        next_state = np.argmax(Q[starting_state, :])
        next_location = state_to_location[next_state]
        route.append(next_location)
        starting_location = next_location

    return route

# PART 3 - GOING INTO PRODUCTION
# Function that returns the optimal route with an intermediary location
def best_route(starting_location, intermediary_location, ending_location):
    # Get the route from starting location to intermediary location
    first_part = route(starting_location, intermediary_location)
    
    # Get the route from intermediary location to ending location, excluding the first location (since it's already included in the first part)
    second_part = route(intermediary_location, ending_location)[1:]
    
    # Concatenate the two parts of the route
    final_route = first_part + second_part
    
    return final_route

# Printing the final route
print('Route:')
print(best_route('E', 'K', 'G'))
